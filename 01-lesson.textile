h1. Lesson 1

Today we'll cover:
* values
* expressions
* functions
* classes
* methods
* basic inheritance
* try-catch-finally

h2. About this class

The first few weeks will cover basic syntax and concepts. Then we'll start
to open it up with more exercises.

Some examples will be given as if written in the interpreter, others
as if written in a source file.

Having an interpreter available makes it easy to explore a problem
space.


h2. Why Scala?

* Expressive
** First-class functions
** Closures
* Concise
** Type inference
** Literal syntax for function creation
* Java interopability
** Can reuse java libraries
** Can reuse java tools
** No performance penalty

h2. How Scala?

* Compiles to java bytecode
* Works with any standard JVM
** Or even some non-standard JVMs like Dalvik
** Scala compiler written by author of Java compiler

h2. Think Scala

Scala is not just a nicer Java. You should learn it with a fresh mind,
you will get more out of these classes.

h2. Start the Interpreter

<pre>
$ scala

Welcome to Scala version 2.8.0.final (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_20).
Type in expressions to have them evaluated.
Type :help for more information.

scala>
</pre>


h2. Expressions

<pre>
scala> 1 + 1
res0: Int = 2
</pre>

res0 is an automatically created value name given by the interpreter
to the result of your expression. It has the type Int and contains the
Integer 2.

Everything in Scala is an expression.

h2. Values

You can give the result of an expression a name.

<pre>
scala> val two = 1 + 1
two: Int = 2
</pre>

h3. Functions

You can create functions with def.

<pre>
scala> def addOne(m: Int): Int = m + 1
addOne: (m: Int)Int
</pre>

In Scala, you need to specify the type signature for function
parameters. The interpreter happily repeats the type signature back to
you.

<pre>
scala> val three = addOne(2)
three: Int = 3
</pre>

h3. Anonymous Functions

You can create anonymous functions.

<pre>
scala> (x: Int) => x + 1
res2: (Int) => Int = <function1>
</pre>

This function adds 1 to an Int.

<pre>
scala> res2(1)
res3: Int = 2
</pre>

You can pass anonymous functions around or save them into vals.

<pre>
scala> val addOne = (x: Int) => x + 1
addOne: (Int) => Int = <function1>

scala> addOne(1)
res4: Int = 2
</pre>

h3. Classes

<pre>
scala> class Calculator {
     |   val brand: String = "HP"
     |   def add(m: Int, n: Int): Int = m + n
     | }
defined class Calculator

scala> val calc = new Calculator
calc: Calculator = Calculator@e75a11

scala> calc.add(1, 2)
res1: Int = 3

scala> calc.brand
res2: String = "HP"
</pre>


Contained are examples are defining methods with def and fields with
val. methods are just functions that can access the state of the class.

h4. Constructor

Constructors aren't special methods, they are the code outside of
method definitions in your class. Let's extend our Calculator example
to take a constructor argument and use it to initialize internal
state.

<pre>
class Calculator(brand: String) {
  /**
   * A constructor.
   */
  val color: String = if (brand == "TI") {
    "blue"
  } else if (brand == "HP") {
    "black"
  } else {
    "white"
  }

  // An instance method.
  def add(m: Int, n: Int): Int = m + n
}
</pre>

Note the two different styles of comments.

h3. Inheritance

<pre>
class ScientificCalculator(brand: String) extends Calculator(brand) {
  def log(m: Double, base: Double) = math.log(m) / math.log(base)
}
</pre>

h3. Overloading methods

<pre>
class EvenMoreScientificCalculator(brand: String) extends ScientificCalculator(brand) {
  def log(m: Int) = log(m, math.exp(1))
}
</pre>


h3. Expressions

Our BasicCalculator example gave an example of how Scala is
expression-oriented. The value color was bound based on an if/else
expression.

h3. try-catch-finally

Exceptions are available in Scala.

<pre>
try {
  remoteCalculatorService.add(1, 2)
} catch {
  case e: ServerIsDownException => log.error(e, "the remote calculator service is unavailble. should have kept your trustry HP.")
} finally {
  remoteCalculatorService.close()
}
</pre>

trys are also expression-oriented

<pre>
val result: Int = try {
  remoteCalculatorService.add(1, 2)
} catch {
  case e: ServerIsDownException => {
    log.error(e, "the remote calculator service is unavailble. should have kept your trustry HP.")
    0
  }
} finally {
  remoteCalculatorService.close()
}
</pre>

This is not an example of excellent programming style, just an example
of expressions in action. Better would be to re-throw.

Finally will be called after any exception has been handled.
