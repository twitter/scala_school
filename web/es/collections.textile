---
prev: basics2.textile
next: pattern-matching-and-functional-composition.textile
title: Colecciones
layout: post
---

Esta lección contempla:

* Basic Data Structures
* Estructuras de Datos básicas
** "Listas":#Lists
** "Conjuntos":#Sets
** "Tupla":#Tuple
** "Maps":#Maps
** "Option":#Option
* Combinadores funcionales
** "map":#map
** "foreach":#foreach
** "filter":#filter
** "zip":#zip
** "partition":#partition
** "find":#find
** "drop y dropWhile":#drop
** "foldLeft y foldRight":#fold
** "flatten":#flatten
** "flatMap":#flatMap
** "Generalized functional combinators":#generalized
** "Map?":#vsMap

h1. Estructuras basicas de datos

Scala provee algunas colecciones.

*Véase tambien* en Effective Scala que tiene información acerca de como usar <a href="http://twitter.github.com/effectivescala/#Collections">colecciones</a>.

h2(#Lists). Listas

<pre>
scala> val numeros = List(1, 2, 3, 4)
numeros: List[Int] = List(1, 2, 3, 4)
</pre>

h2(#Sets). Conjuntos

Los conjuntos no pueden tener duplicados.

<pre>
scala> Set(1, 1, 2)
res0: scala.collection.immutable.Set[Int] = Set(1, 2)
</pre>

h2(#Tuple). Tupla

Una tupla agrupa colecciones lógicas simples de elementos sin usar una clase.

<pre>
scala> val hostPort = ("localhost", 80)
hostPort: (String, Int) = (localhost, 80)
</pre>

A diferencia de las clases caso, no tienen métodos de acceso nombrados, en su lugar tienen metodos de acceso que son nombrados por su posición y esta basado en índice 1 en vez de 0.

<pre>
scala> hostPort._1
res0: String = localhost

scala> hostPort._2
res1: Int = 80
</pre>

Las tuplas encajan con "pattern matching" perfectamente.

<pre>
hostPort match {
  case ("localhost", port) => ...
  case (host, port) => ...
}
</pre>

Las tuplas tienen la facilidad de simplificar su implementación con 2 valores utilizando: <code>-></code>.

<pre>
scala> 1 -> 2
res0: (Int, Int) = (1,2)
</pre>

*Véase tambien* Effective Scala que tiene contenido  acerca de <a href="http://twitter.github.com/effectivescala/#Functional programming-Destructuring bindings">como desestructurar enlaces</a> ("desempaquetar una tupla").

h2(#Maps). Maps

Pueden contener tipos basicos de datos.

<pre>
Map(1 -> 2)
Map("foo" -> "bar")
</pre>

Esto se ve como una sintáxis especial pero recuerda lo que se dijo de la tupla que <code>-></code>  puede ser usado para crear tuplas.

<code>Map()</code> tambien usa la sintáxis de argumentos que aprendimos en la leccion #1: <code> Map(1 -> "one", 2 -> "two") </code> la cual se usa dentro de <code> Map((1, "one"), (2, "two")) </code> con el primer siendo la clave y el segundo siendo el valor del Map.

Los "Maps" tambien pueden contener "Maps" o incluso funciones como valores.

<pre>
Map(1 -> Map("foo" -> "bar"))
</pre>

<pre>
Map("timesTwo" -> { timesTwo(_) })
</pre>

h2(#Option). Option

<code>Option</code> es un contenedor que puede o no contener algún elemento.

La interfaz basica de Option se ve así:

<pre>
trait Option[T] {
  def isDefined: Boolean
  def get: T
  def getOrElse(t: T): T
}
</pre>

Option en si misma es generica y tiene dos subclases: <code>Some[T]</code> o <code>None</code>.

Veamos un ejemplo de como se usa Option:

<code>Map.get</code> usa <code>Option</code> como su tipo de retorno. Option te ayuda a saber que el metodo puede no retornar lo que estas solicitando.

<pre>
scala> val numbers = Map("one" -> 1, "two" -> 2)
numbers: scala.collection.immutable.Map[java.lang.String,Int] = Map(one -> 1, two -> 2)

scala> numbers.get("two")
res0: Option[Int] = Some(2)

scala> numbers.get("three")
res1: Option[Int] = None
</pre>

Ahora nuestros datos aparecen atrapados en <code>Option</code>. ¿Como lidiamos con esto?.

Un primer instinto podria ser usar un condicional basado en el metodo <code>IsDefined</code>.

<pre>
// We want to multiply the number by two, otherwise return 0.
val result = if (res1.isDefined) {
  res1.get * 2
} else {
  0
}
</pre>

Te sugerimos utilizar <code>getOrElse</code> o coincidencia  de patrones (pattern matching) para lidiar con este resultado.
<code>getOrElse</code> también te permite facilmente definir un valor por defecto.

<pre>
val result = res1.getOrElse(0) * 2
</pre>

La coincidencia de patrones (pattern matching) se adapta naturalmente con <code>Option</code>.

<pre>
val result = res1 match {
  case Some(n) => n * 2
  case None => 0
}
</pre>


*Véase tambien* en Effective Scala que tiene contenido acerca de <a href="http://twitter.github.com/effectivescala/#Functional programming-Options">Options</a>.


h1(#combinators). Combinadores funcionales

<code>List(1, 2, 3) map squared</code> aplica la función <code>squared</code> a los elementos de la lista, regresando una nueva lista, por ejemplo <code>List(1, 4, 9)</code>. Llamamos operaciones como <em>combinadores</em> <code>map</code>. Si tu prefieres una mejor definicion, puedes ver  <a href="http://stackoverflow.com/questions/7533837/explanation-of-combinators-for-the-working-man">Explanation of combinators</a> en Stackoverflow. Su uso mas comun es en estructuras de datos  estandar.

h2(#map). map

Evalua una función sobre cada elemento de la lista, retornando una lista con el mismo numero de elementos.

<pre>
scala> numbers.map((i: Int) => i * 2)
res0: List[Int] = List(2, 4, 6, 8)
</pre>

o pasa en una función (el compilador de scala automaticamente convierte nuestro metodo a una función).

<pre>
scala> def timesTwo(i: Int): Int = i * 2
timesTwo: (i: Int)Int

scala> numbers.map(timesTwo)
res0: List[Int] = List(2, 4, 6, 8)
</pre>

h2(#foreach). foreach

foreach es como map pero no retorna nada. foreach esta destinada unicamente a efectos secundarios.

<pre>
scala> numbers.foreach((i: Int) => i * 2)
</pre>

La función entonces no retorna nada.

tu puedes tratar de guardar lo que retorna en un valor pero sera de tipo Unit (similar a void).

<pre>
scala> val doubled = numbers.foreach((i: Int) => i * 2)
doubled: Unit = ()
</pre>

h2(#filter). filter

Elimina cualquier elemento donde la función que pasaste retorna un false. Las funciones que retornan un Boolean son a menudo llamadas funciones predicado y evaluan para la inclusión de los elementos.

<pre>
scala> numbers.filter((i: Int) => i % 2 == 0)
res0: List[Int] = List(2, 4)
</pre>

<pre>
scala> def isEven(i: Int): Boolean = i % 2 == 0
isEven: (i: Int)Boolean

scala> numbers.filter(isEven _)
res2: List[Int] = List(2, 4
</pre>

h2(#zip). zip

<code>zip</code> agrega los contenidos de 2 listas en una lista de pares.

<pre>
scala> List(1, 2, 3).zip(List("a", "b", "c"))
res0: List[(Int, String)] = List((1,a), (2,b), (3,c))
</pre>

h2(#partition). partition

<code>partition</code> divide una lista de acuerdo con una función predicado.

<pre>
scala> val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
scala> numbers.partition(_ % 2 == 0)
res0: (List[Int], List[Int]) = (List(2, 4, 6, 8, 10),List(1, 3, 5, 7, 9))
</pre>

h2(#find). find

<code>find</code> regresa el primer elemento de una coleccion que coincide con una función predicado.

<pre>
scala> numbers.find((i: Int) => i > 5)
res0: Option[Int] = Some(6)
</pre>

h2(#drop). drop & dropWhile

<code>drop</code> elimina el primer elemento i.

<pre>
scala> numbers.drop(5)
res0: List[Int] = List(6, 7, 8, 9, 10)
</pre>

<code>dropwhile</code> elimina los primeros elementos que coinciden con una función predicado mientras sea verdadera. Por ejemplo, si hacemos <code>dropwhile</code> con una función predicado de numeros impares, en nuestra lista de numeros, el numero <code>1</code> se elimina (pero no el <code>3</code>  porque esta protegido por el numero <code>2</code>).

<pre>
scala> numbers.dropWhile(_ % 2 != 0)
res0: List[Int] = List(2, 3, 4, 5, 6, 7, 8, 9, 10)
</pre>

h2(#fold). foldLeft y foldRight

h3. foldLeft
<pre>
scala> numbers.foldLeft(0)((m: Int, n: Int) => m + n)
res0: Int = 55
</pre>

0 es el valor de comienzo (recuerda que los numeros son una lista List[Int]), y m actua como un acumulador.

Veámoslo:

<pre>
scala> numbers.foldLeft(0) { (m: Int, n: Int) => println("m: " + m + " n: " + n); m + n }
m: 0 n: 1
m: 1 n: 2
m: 3 n: 3
m: 6 n: 4
m: 10 n: 5
m: 15 n: 6
m: 21 n: 7
m: 28 n: 8
m: 36 n: 9
m: 45 n: 10
res0: Int = 55
</pre>


h3. foldRight

Es lo mismo que foldleft excepto que corre en la direccion opuesta

<pre>
scala> numbers.foldRight(0) { (m: Int, n: Int) => println("m: " + m + " n: " + n); m + n }
m: 10 n: 0
m: 9 n: 10
m: 8 n: 19
m: 7 n: 27
m: 6 n: 34
m: 5 n: 40
m: 4 n: 45
m: 3 n: 49
m: 2 n: 52
m: 1 n: 54
res0: Int = 55
</pre>

h2(#flatten). flatten

<code>flatten</code> colapsa a un nivel una estructura anidada

<pre>
scala> List(List(1, 2), List(3, 4)).flatten
res0: List[Int] = List(1, 2, 3, 4)
</pre>

h2(#flatMap). flatMap

<code>flatMap</code> es un combinador frecuentemente usado que combina mapping y flattening. <code>flatMap</code> toma una función que trabaja sobre una la lista anidada y concatena el resultado en una nueva lista

<pre>
scala> val nestedNumbers = List(List(1, 2), List(3, 4))
nestedNumbers: List[List[Int]] = List(List(1, 2), List(3, 4))

scala> nestedNumbers.flatMap(x => x.map(_ * 2))
res0: List[Int] = List(2, 4, 6, 8)
</pre>

Piensa en esto como una forma abreviada para hacer mapping y despues flattening:

<pre>
scala> nestedNumbers.map((x: List[Int]) => x.map(_ * 2)).flatten
res1: List[Int] = List(2, 4, 6, 8)
</pre>

El ejemplo llamando map y despues flatten es un ejemplo de "combinador" como algo natural de estas funciones.

*Véase tambien* Effective Scala que tiene documentaion acerca de <a href="http://twitter.github.com/effectivescala/#Functional programming-`flatMap`">flatMap</a>.

h2(#generalized). Generalized functional combinators

Ahora que hemos aprendido varias funciones para trabajar con colecciones nos gustaria ser capaces de escribir nuestros propios combinadores funcionales.
Es interesante que cada combinador funcional que se muestra arriba puede ser escrito con funciones <code>fold</code>. Veamos algunos ejemplos:

<pre>
def ourMap(numbers: List[Int], fn: Int => Int): List[Int] = {
  numbers.foldRight(List[Int]()) { (x: Int, xs: List[Int]) =>
    fn(x) :: xs
  }
}

scala> ourMap(numbers, timesTwo(_))
res0: List[Int] = List(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
</pre>

¿Por qué <code>List[Int]()</code>? Scala no fue lo suficientemente inteligente para notar que tu querías una lista vacia de enteros para acumular informacion.

h2(#vsMap). Map?

Todos los combinadores funcionales mostrados tambien trabajan sobre Maps, los Maps pueden ser pensados como una lista de pares, así las funciones que escribes trabajan en una pareja de llaves y valores en el Map.

<pre>
scala> val extensions = Map("steve" -> 100, "bob" -> 101, "joe" -> 201)
extensions: scala.collection.immutable.Map[String,Int] = Map((steve,100), (bob,101), (joe,201))
</pre>

Ahora filtrar cada entrada cuya extensión telefónica es inferior a 200. 

<pre>
scala> extensions.filter((namePhone: (String, Int)) => namePhone._2 < 200)
res0: scala.collection.immutable.Map[String,Int] = Map((steve,100), (bob,101))
</pre>

Porque le da una tupla, tienes que sacar las claves y valores con sus descriptores de acceso posicionales. ¡Qué asco!

Por suerte, podemos usar una coincidencia de patrón para extraer la clave y el valor fácilmente.

<pre>
scala> extensions.filter({case (name, extension) => extension < 200})
res0: scala.collection.immutable.Map[String,Int] = Map((steve,100), (bob,101))
</pre>

¿Por qué funciona esto? ¿Por qué puedes pasar un patrón de coincidencia en un parcial?

permanece al pendiente para la siguiente semana!
