---
prev: basics2.textile
next: pattern-matching-and-functional-composition.textile
title: Kolekcije
layout: post
---

Ova lekcija sadržava:

* Osnovne strukture podataka
** "Arrays":#Arrays
** "Liste":#Lists
** "Sets":#Sets
** "Tuple":#Tuple
** "Mape":#Maps
** "Option":#Option
* Funkcionalni Kombinatori
** "map":#map
** "foreach":#foreach
** "filter":#filter
** "zip":#zip
** "partition":#partition
** "find":#find
** "drop and dropWhile":#drop
** "foldRight and foldLeft":#fold
** "flatten":#flatten
** "flatMap":#flatMap
** "Generalizirani funkcionalni kombinatori":#generalized
** "Map?":#vsMap

h1. Osnovne strukture podataka

Scala pruža neke lijepe kolekcije.

*Dobro je pogledati* Efektivna Scala ima mišljenje kako koristiti <a href="http://twitter.github.com/effectivescala/#Collections">collections</a>.

h2(#Arrays). Arrays

Array-evi održavaju order, mogu sadržavati duplikate, i mutable su.

<pre>
scala> val numbers = Array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)
numbers: Array[Int] = Array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)

scala> numbers(3) = 10
</pre>

h2(#Lists). Liste

Liste sadržavaju order, mogu sadržavati duplikate, i immutable su.

<pre>
scala> val numbers = List(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)
numbers: List[Int] = List(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)

scala> numbers(3) = 10
<console>:9: error: value update is not a member of List[Int]
              numbers(3) = 10
</pre>

h2(#Sets). Sets

Set-ovi ne održavaju order i nemaju duplikata

<pre>
scala> val numbers = Set(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)
numbers: scala.collection.immutable.Set[Int] = Set(5, 1, 2, 3, 4)
</pre>

h2(#Tuple). Tuple

Tuple grupira jednostavne logičke kolekcije item-a bez korištenja klase.

<pre>
scala> val hostPort = ("localhost", 80)
hostPort: (String, Int) = (localhost, 80)
</pre>

Naspram case klasa, nemaju imenovane akcesore (accessors), umjesto toga imaju akcesore imenovane prema njihovoj poziciji i 1-based su, a ne 0-based.

<pre>
scala> hostPort._1
res0: String = localhost

scala> hostPort._2
res1: Int = 80
</pre>

Tuple-ovi fitaju sa pattern matching vrlo lipo.

<pre>
hostPort match {
  case ("localhost", port) => ...
  case (host, port) => ...
}
</pre>

Tuple ima specijalni umak za kreiranje Tuple-ova od 2 vrijednosti: <code>-></code>

<pre>
scala> 1 -> 2
res0: (Int, Int) = (1,2)
</pre>

*Dobro je pogledati* Efektivna Scala ima mišljenje <a href="http://twitter.github.com/effectivescala/#Functional programming-Destructuring bindings">destructuring bindings</a> ("odpakiranje" tuple-a).

h2(#Maps). Mape

Mogu sadržavati osnovne tipove podataka.

<pre>
Map(1 -> 2)
Map("foo" -> "bar")
</pre>

Ovo izgleda kao specijalna sintaksa ali sjetite se naše diskusije gdje se Tuple <code>-></code> može koristiti za kreiranje Tuple-ova.
Map() također koristi taj varijabilni argument koji smo naučili u lekciji #1: <code>Map(1 -> "one", 2 -> "two")</code> koji se proširuje u <code>Map((1, "one"), (2, "two"))</code> sa prvim elementom koji je ključ i drugim elementom koji je vrijednost Map-e.

Mape same mogu sadržavati Mape ili čak i funkcije kao vrijednosti.

<pre>
Map(1 -> Map("foo" -> "bar"))
</pre>

<pre>
Map("timesTwo" -> { timesTwo(_) })
</pre>

h2(#Option). Option

<code>Option</code> je kontenjer koji može ali ne mora sadržavati nešto.

Klasičan interface za Option izgleda:

<pre>
trait Option[T] {
  def isDefined: Boolean
  def get: T
  def getOrElse(t: T): T
}
</pre>

Option je sam po sebi generičan i ima dvije podklase: <code>Some[T]</code> ili <code>None</code>

Pogledajmo primjer kako se Option koristi:

<code>Map.get</code> koristi <code>Option</code> za njegov povratni tip.
Option nam govori da metoda možda neće vratiti ono što ste tražili.

<pre>
scala> val numbers = Map("one" -> 1, "two" -> 2)
numbers: scala.collection.immutable.Map[java.lang.String,Int] = Map(one -> 1, two -> 2)

scala> numbers.get("two")
res0: Option[Int] = Some(2)

scala> numbers.get("three")
res1: Option[Int] = None
</pre>

Sada se čini da su naši podaci zapeli u <code>Option</code>. Kako se nosimo s tim?

Na prvu, pomislili bi da trebate napraviti nešto kondicionalno bazirano na <code>isDefined</code> metodi.

<pre>
// We want to multiply the number by two, otherwise return 0.
val result = if (res1.isDefined) {
  res1.get * 2
} else {
  0
}
</pre>

Mi bi vam preporučili da koristite ili <code>getOrElse</code> ili pattern matching kako bi uspješno baratali rezultatom.

<code>getOrElse</code> vam dopušta da jednostavno definirate standardnu vrijednost.

<pre>
val result = res1.getOrElse(0) * 2
</pre>

Pattern matching fita prirodno sa <code>Option</code>.

<pre>
val result = res1 match {
  case Some(n) => n * 2
  case None => 0
}
</pre>

*Dobro je pogledati* Effective Scala ima mišljenje o <a href="http://twitter.github.com/effectivescala/#Functional programming-Options">Options</a>.

h1(#combinators). Funkcionalni Kombinatori

<code>List(1, 2, 3) map squared</code> pridružuje funkciju <code>squared</code> elementima liste, vraćajući novu listu, vjerojatno <code>List(1, 4, 9)</code>. Operacije kao <code>map</code> zovemo <em>kombinatori</em>. (Ako želite bolju definiciju vjerojatno će vas zanimati <a href="http://stackoverflow.com/questions/7533837/explanation-of-combinators-for-the-working-man">Explanation of combinators</a> na Stackoverflow-u.) Njihova najčešća primjena je na standardnim strukturama podataka.

h2(#map). map

Evaulira funkciju kroz svaki element liste, vraćajući listu sa istim brojem elemenata.

<pre>
scala> val numbers = List(1, 2, 3, 4)
numbers: List[Int] = List(1, 2, 3, 4)

scala> numbers.map((i: Int) => i * 2)
res0: List[Int] = List(2, 4, 6, 8)
</pre>

ili proslijedite u funkciju (Scala kompajler automatski konvertira našu metodu u funkciju)

<pre>

scala> def timesTwo(i: Int): Int = i * 2
timesTwo: (i: Int)Int

scala> numbers.map(timesTwo)
res0: List[Int] = List(2, 4, 6, 8)
</pre>

h2(#foreach). foreach

foreach je kao mapa ali ne vraća ništa, nada. foreach je namijenjen samo za side-effects.

<pre>
scala> numbers.foreach((i: Int) => i * 2)
</pre>

vraća ništa.

Možete pokušati pohraniti return u vrijednost ali to će biti tipa Unit (tj. void)

<pre>
scala> val doubled = numbers.foreach((i: Int) => i * 2)
doubled: Unit = ()
</pre>

h2(#filter). filter

uklanja sve elemente gdje funkcija koju proslijeđujete očekuje false.  Funkcije koje pozivaju Boolean se obično zovu predikatne funkcije.

<pre>
scala> numbers.filter((i: Int) => i % 2 == 0)
res0: List[Int] = List(2, 4)
</pre>

<pre>
scala> def isEven(i: Int): Boolean = i % 2 == 0
isEven: (i: Int)Boolean

scala> numbers.filter(isEven)
res2: List[Int] = List(2, 4)
</pre>

h2(#zip). zip

zip agregira sadržaj dvije liste u jednu listu parova.

<pre>
scala> List(1, 2, 3).zip(List("a", "b", "c"))
res0: List[(Int, String)] = List((1,a), (2,b), (3,c))
</pre>

h2(#partition). partition

<code>partition</code> dijeli listu ovisno o tome gdje dolazi do pucanja s respektom prema predikatnoj funkciji.

<pre>
scala> val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
scala> numbers.partition(_ % 2 == 0)
res0: (List[Int], List[Int]) = (List(2, 4, 6, 8, 10),List(1, 3, 5, 7, 9))
</pre>

h2(#find). find

find vraća prvi element kolekcije koja match-a predikatnu funkciju.

<pre>
scala> numbers.find((i: Int) => i > 5)
res0: Option[Int] = Some(6)
</pre>

h2(#drop). drop & dropWhile

<code>drop</code> dropa prvih i elemenata

<pre>
scala> numbers.drop(5)
res0: List[Int] = List(6, 7, 8, 9, 10)
</pre>

<code>dropWhile</code> uklanja prve elemente koji match-iraju predikatnu funkciju. Npr. ako koristimo <code>dropWhile</code> kako bi uklonili neobične brojeve iz naše liste brojeva, <code>1</code> je drop-an (ali ne i <code>3</code> koji je "zaštićen" sa <code>2</code>).

<pre>
scala> numbers.dropWhile(_ % 2 != 0)
res0: List[Int] = List(2, 3, 4, 5, 6, 7, 8, 9, 10)
</pre>

h2(#fold). foldLeft

<pre>
scala> numbers.foldLeft(0)((m: Int, n: Int) => m + n)
res0: Int = 55
</pre>

0 je početna vrijednost (zapamtite da su brojevi List[Int]), i m
se ponaša kao akumulator.

Vizualno:

<pre>
scala> numbers.foldLeft(0) { (m: Int, n: Int) => println("m: " + m + " n: " + n); m + n }
m: 0 n: 1
m: 1 n: 2
m: 3 n: 3
m: 6 n: 4
m: 10 n: 5
m: 15 n: 6
m: 21 n: 7
m: 28 n: 8
m: 36 n: 9
m: 45 n: 10
res0: Int = 55
</pre>

h3. foldRight

Je isto kao i foldLeft osim što se pokreće u suprotnom smjeru.

<pre>
scala> numbers.foldRight(0) { (m: Int, n: Int) => println("m: " + m + " n: " + n); m + n }
m: 10 n: 0
m: 9 n: 10
m: 8 n: 19
m: 7 n: 27
m: 6 n: 34
m: 5 n: 40
m: 4 n: 45
m: 3 n: 49
m: 2 n: 52
m: 1 n: 54
res0: Int = 55
</pre>

h2(#flatten). flatten

flatten lomi jednu razinu nested strukture.

<pre>
scala> List(List(1, 2), List(3, 4)).flatten
res0: List[Int] = List(1, 2, 3, 4)
</pre>

h2(#flatMap). flatMap

flatMap je često korišten kombinator koji kombinira mapping i flattening. flatMap uzima funkciju koja radi sa nested listama i zatim ponovno spaja rezultat.

<pre>
scala> val nestedNumbers = List(List(1, 2), List(3, 4))
nestedNumbers: List[List[Int]] = List(List(1, 2), List(3, 4))

scala> nestedNumbers.flatMap(x => x.map(_ * 2))
res0: List[Int] = List(2, 4, 6, 8)
</pre>

Mislite na to kao na kraticu za mapping i zatim flattening:

<pre>
scala> nestedNumbers.map((x: List[Int]) => x.map(_ * 2)).flatten
res1: List[Int] = List(2, 4, 6, 8)
</pre>

taj primjer koji poziva map i zatim flatten je primjer "kombinator"-like prirode tih funkcija.

*Dobro je pogledati* Efektivna Scala ima mišljenje o tome <a href="http://twitter.github.com/effectivescala/#Functional programming-`flatMap`">flatMap</a>.

h2(#generalized). Generalizirani funkcijski kombinatori

Sada smo naučili osnovne funkcije za rad sa kombinatorima.

Sada želimo sami napisati naše funkcijske kombinatore.

Zanimljivo, svaki funkcijski kombinator prikazan ranije može biti napisan na vrhu fold-a. Pogledajmo neke primjere.

<pre>
def ourMap(numbers: List[Int], fn: Int => Int): List[Int] = {
  numbers.foldRight(List[Int]()) { (x: Int, xs: List[Int]) =>
    fn(x) :: xs
  }
}

scala> ourMap(numbers, timesTwo(_))
res0: List[Int] = List(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
</pre>

Zašto <tt>List[Int]()</tt>? Scala nije bila dovoljno pametna i nije shvatila da želite praznu listu Int-ova u koju bi to akumulirali.

h2(#vsMap). Map?

Svi prikazani funkcijski kombinatori također rade na Maps. Maps se može promatrati kao lista parova kako bi funkcije koje ste pisali radile na paru ključeva i vrijednosti u Map.

<pre>
scala> val extensions = Map("steve" -> 100, "bob" -> 101, "joe" -> 201)
extensions: scala.collection.immutable.Map[String,Int] = Map((steve,100), (bob,101), (joe,201))
</pre>

Sada filter-irajte svaki zapis čija je ekstenzija broja manja od 200.

<pre>
scala> extensions.filter((namePhone: (String, Int)) => namePhone._2 < 200)
res0: scala.collection.immutable.Map[String,Int] = Map((steve,100), (bob,101))
</pre>

Zato što vam daje tuple, morate povući ključeve i vrijednosti sa njihovim pozicijskim akcesorima. Sretno!

Srećom za nas, zapravo možemo koristiti pattern match za lipo izvlačenje ključeva i vrijednosti.

<pre>
scala> extensions.filter({case (name, extension) => extension < 200})
res0: scala.collection.immutable.Map[String,Int] = Map((steve,100), (bob,101))
</pre>

Zašto ovo radi? Zašto možete proslijediti parcijalni pattern match?

Vidimo se sljedeći tjedan!
